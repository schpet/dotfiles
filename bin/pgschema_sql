#!/bin/bash

set -euo pipefail

# dumps CREATE TABLE statements and other relevant schema parts for every table into SQL files

# Check if DATABASE_URL argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <database-url>"
    echo "Example: $0 postgres://user:pass@localhost:5432/dbname"
    exit 1
fi

# If input doesn't start with postgres://, assume it's just a database name
if [[ "$1" != postgres://* ]]; then
    DATABASE_URL="postgres://localhost/$1"
else
    DATABASE_URL="$1"
fi
echo "connecting to $DATABASE_URL"

# Create 'pgschema_sql' directory if not exists
[ ! -d "pgschema_sql" ] && mkdir "pgschema_sql"

# Fetch all table names from the public schema
TABLE_NAMES=$(psql "$DATABASE_URL" -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public'" | grep -v "rows)" | grep -v "Time:")

# Loop over each table name and dump its CREATE TABLE statement, other relevant schema parts, foreign key information, and enum types into an SQL file
for TABLE_NAME in $TABLE_NAMES; do
    {
        # Dump CREATE TABLE statement and other relevant schema parts
        pg_dump "$DATABASE_URL" -t "$TABLE_NAME" --schema-only | grep -v '^SET ' | grep -v '^--' | grep -v '^SELECT ' | sed '/^$/N;/^\n$/D'
        
        echo -e "\n-- Foreign keys referencing this table:"
        psql "$DATABASE_URL" -c "SELECT
            format(
                'ALTER TABLE %I.%I ADD CONSTRAINT %I FOREIGN KEY (%I) REFERENCES %I.%I (%I);',
                cl.relnamespace::regnamespace::text,
                cl.relname,
                con.conname,
                array_to_string(array_agg(att.attname), ', '),
                ct.relnamespace::regnamespace::text,
                ct.relname,
                array_to_string(array_agg(att2.attname), ', ')
            ) AS foreign_key_definition
        FROM pg_constraint con
        JOIN pg_class cl ON con.conrelid = cl.oid
        JOIN pg_class ct ON con.confrelid = ct.oid
        JOIN pg_attribute att ON att.attrelid = cl.oid AND att.attnum = ANY(con.conkey)
        JOIN pg_attribute att2 ON att2.attrelid = ct.oid AND att2.attnum = ANY(con.confkey)
        WHERE con.contype = 'f'
        AND ct.relname = '$TABLE_NAME'
        GROUP BY cl.relnamespace, cl.relname, con.conname, ct.relnamespace, ct.relname
        ORDER BY cl.relname, con.conname;" -t
        
        echo -e "\n-- Enum types used in this table:"
        psql "$DATABASE_URL" -c "SELECT DISTINCT
            format(
                'CREATE TYPE %I.%I AS ENUM (%s);',
                n.nspname,
                t.typname,
                string_agg(quote_literal(e.enumlabel), ', ' ORDER BY e.enumsortorder)
            ) AS enum_definition
        FROM pg_type t
        JOIN pg_enum e ON t.oid = e.enumtypid
        JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
        JOIN pg_attribute a ON (a.atttypid = t.oid OR (a.atttypid = 'pg_catalog.anyarray'::regtype AND a.atttypid = (SELECT typarray FROM pg_type WHERE oid = t.oid)))
        JOIN pg_class c ON c.oid = a.attrelid
        WHERE c.relname = '$TABLE_NAME'
        GROUP BY n.nspname, t.typname;" -t
    } > "pgschema_sql/$TABLE_NAME.sql"
done

# Dump the whole schema as well, excluding SET statements, comments, and SELECT statements
pg_dump "$DATABASE_URL" -s | grep -v '^SET ' | grep -v '^--' | grep -v '^SELECT ' | sed '/^$/N;/^\n$/D' > pgschema_sql/full_schema.sql

echo "Schema dump completed. SQL files are stored in the 'pgschema_sql' directory."
