#!/bin/bash

set -euo pipefail

function usage() {
    echo "Usage: $0 <command> <sub-command>"
    echo "Commands:"
    echo "  i|issue         View the linear issue linked to the current git branch"
    echo "  id              Print the issue id in the current git branch"
    echo "  t|team          Open the team page in Linear.app"
    echo "  it|issue-title  Fetch and display the title of the current issue"
    echo "  view            View the issue's title and body"
    exit 1;
}

function issue() {
    issueId=$(id)

    if [ "$issueId" ]; then
        url="https://linear.app/$LINEAR_WORKSPACE/issue/$issueId"
        echo "Opening $url in Linear.app"
        open -a /Applications/Linear.app "$url"
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

 function id() {
    gitBranch=$(git symbolic-ref --short HEAD)
    issueId=$(echo $gitBranch | ggrep -oP '[a-zA-Z]{2,5}-[1-9][0-9]*' | tail -n 1)

    if [ "$issueId" ]; then
        echo $issueId | awk '{print toupper($0)}'
    fi
 }

function team() {
    dir=$(basename $(git rev-parse --show-toplevel))
    teamId=$(echo $dir | ggrep -oP '^[a-zA-Z]{2,5}' | awk '{print toupper($0)}')

    if [ "$teamId" ]; then
        # filter is equivalent to
        # {"and":[{"assignee":{"or":[{"isMe":{"eq":true}}]}}]
        open -a /Applications/Linear.app "https://linear.app/$LINEAR_WORKSPACE/team/$teamId/active?filter=eyJhbmQiOlt7ImFzc2lnbmVlIjp7Im9yIjpbeyJpc01lIjp7ImVxIjp0cnVlfX1dfX1dfQ"
    else
        echo "Could not determine team id from directory name."
        exit 1
    fi
}

function issue_title() {
    issueId=$(id)

    if [ -z "$LINEAR_API_KEY" ]; then
        echo "LINEAR_API_KEY environment variable is not set."
        exit 1
    fi

    if [ "$issueId" ]; then
        query='query($id: String!) { issue(id: $id) { title } }'
        variables=$(jo id="$issueId")
        data=$(jo query="$query" variables="$variables")

        response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $LINEAR_API_KEY" \
            --data "$data" \
            https://api.linear.app/graphql)

        title=$(echo $response | jq -r '.data.issue.title')

        if [ "$title" != "null" ]; then
            echo "$title"
        else
            echo "Failed to fetch issue title. Make sure the issue ID is correct and you have the necessary permissions."
            exit 1
        fi
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

function view() {
    issueId=$(id)

    if [ -z "$LINEAR_API_KEY" ]; then
        echo "LINEAR_API_KEY environment variable is not set."
        exit 1
    fi

    if [ "$issueId" ]; then
        query='query($id: String!) { issue(id: $id) { title, description } }'
        variables=$(jo id="$issueId")
        data=$(jo query="$query" variables="$variables")

        response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $LINEAR_API_KEY" \
            --data "$data" \
            https://api.linear.app/graphql)

        title=$(echo $response | jq -r '.data.issue.title')
        description=$(echo $response | jq -r '.data.issue.description')

        if [ "$title" != "null" ] && [ "$description" != "null" ]; then
            echo -e "# $title\n\n$description"
        else
            echo "Failed to fetch issue details. Make sure the issue ID is correct and you have the necessary permissions."
            exit 1
        fi
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

CMD=${1:-""}
case $CMD in
    i | issue)
        issue
        ;;
    id)
        id
        ;;
    t | team)
        team
        ;;
    it | issue-title)
        issue_title
        ;;
    view)
        view
        ;;
    *)
        usage
        ;;
esac
