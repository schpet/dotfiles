#!/bin/bash

# this cli assumes
# 1. you use linear's issue id in the branch name
# 2. your repo directory name starts with the team prefix and a dash

set -euo pipefail

function usage() {
    echo "Usage: $0 <command> <sub-command>"
    echo "Commands:"
    echo "  i|issue         View the linear issue linked to the current git branch"
    echo "  id              Print the issue id in the current git branch"
    echo "  t|team          Open the team page in Linear.app"
    echo "  tid|team-id     Print the team id derived from the repository name"
    echo "  it|issue-title  Fetch and display the title of the current issue"
    echo "  ip|issue-print  Print the issue's title and body"
    echo "  r|reactions     List active issues with reactions for a team"
    exit 1;
}

function issue() {
    issueId=$(id)

    if [ "$issueId" ]; then
        url="https://linear.app/$LINEAR_WORKSPACE/issue/$issueId"
        echo "Opening $url in Linear.app"
        open -a /Applications/Linear.app "$url"
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

 function id() {
    gitBranch=$(git symbolic-ref --short HEAD)
    issueId=$(echo $gitBranch | ggrep -oP '[a-zA-Z]{2,5}-[1-9][0-9]*' | head -n 1)

    if [ "$issueId" ]; then
        echo $issueId | awk '{print toupper($0)}'
    fi
 }

function team() {
    dir=$(basename $(git rev-parse --show-toplevel))
    teamId=$(echo $dir | ggrep -oP '^[a-zA-Z]{2,5}' | awk '{print toupper($0)}')

    if [ "$teamId" ]; then
        # filter is equivalent to
        # {"and":[{"assignee":{"or":[{"isMe":{"eq":true}}]}}]
        open -a /Applications/Linear.app "https://linear.app/$LINEAR_WORKSPACE/team/$teamId/active?filter=eyJhbmQiOlt7ImFzc2lnbmVlIjp7Im9yIjpbeyJpc01lIjp7ImVxIjp0cnVlfX1dfX1dfQ"
    else
        echo "Could not determine team id from directory name."
        exit 1
    fi
}

function team_id() {
    dir=$(basename $(git rev-parse --show-toplevel))
    teamId=$(echo $dir | ggrep -oP '^[a-zA-Z]{2,5}' | awk '{print toupper($0)}')

    if [ "$teamId" ]; then
        echo "$teamId"
    else
        echo "Could not determine team id from directory name."
        exit 1
    fi
}

function issue_title() {
    issueId=$(id)

    if [ -z "$LINEAR_API_KEY" ]; then
        echo "LINEAR_API_KEY environment variable is not set."
        exit 1
    fi

    if [ "$issueId" ]; then
        query='query($id: String!) { issue(id: $id) { title } }'
        variables=$(jo id="$issueId")
        data=$(jo query="$query" variables="$variables")

        response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $LINEAR_API_KEY" \
            --data "$data" \
            https://api.linear.app/graphql)

        if [[ $(echo "$response" | jq 'has("errors")') == "true" ]]; then
            echo "GraphQL Error:"
            echo "$response" | jq
            exit 1
        fi

        title=$(echo $response | jq -r '.data.issue.title')

        if [ "$title" != "null" ]; then
            echo "$title"
        else
            echo "Failed to fetch issue title. Make sure the issue ID is correct and you have the necessary permissions."
            exit 1
        fi
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

function reactions() {
    if [ -z "$LINEAR_API_KEY" ]; then
        echo "LINEAR_API_KEY environment variable is not set."
        exit 1
    fi

    if [ -z "$1" ]; then
        echo "Please provide a team ID"
        exit 1
    fi

    teamId="$1"
    query='query($teamId: String!) {
        team(id: $teamId) {
            issues(
                filter: {state: {type: {in: ["started", "unstarted", "backlog"]}}}
                first: 100
            ) {
                nodes {
                    title
                    state {
                        name
                    }
                    reactions {
                        emoji
                    }
                }
            }
        }
    }'
    
    variables=$(jo teamId="$teamId")
    data=$(jo query="$query" variables="$variables")

    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: $LINEAR_API_KEY" \
        --data "$data" \
        https://api.linear.app/graphql)

    if [[ $(echo "$response" | jq 'has("errors")') == "true" ]]; then
        echo "GraphQL Error:"
        echo "$response" | jq
        exit 1
    fi

    # Process and group issues by state
    echo "$response" | jq -r '
        .data.team.issues.nodes | 
        group_by(.state.name)[] |
        (["", "## " + .[0].state.name, ""] + 
        (sort_by(-(.reactions | length)) | map(
            "- [" + ((.reactions | length) | tostring) + "] " + .title + 
            (
                if (.reactions | length) > 0 then
                    " " + (
                        .reactions | 
                        group_by(.emoji) | 
                        map(.[0].emoji + " " + (length | tostring)) |
                        join(" ")
                    )
                else 
                    ""
                end
            )
        ))) | .[]'
}

function issue_print() {
    issueId=$(id)

    if [ -z "$LINEAR_API_KEY" ]; then
        echo "LINEAR_API_KEY environment variable is not set."
        exit 1
    fi

    if [ "$issueId" ]; then
        query='query($id: String!) { issue(id: $id) { title, description } }'
        variables=$(jo id="$issueId")
        data=$(jo query="$query" variables="$variables")

        response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $LINEAR_API_KEY" \
            --data "$data" \
            https://api.linear.app/graphql)

        if [[ $(echo "$response" | jq 'has("errors")') == "true" ]]; then
            echo "GraphQL Error:"
            echo "$response" | jq
            exit 1
        fi

        title=$(echo $response | jq -r '.data.issue.title')
        description=$(echo $response | jq -r '.data.issue.description')

        if [ "$title" != "null" ]; then
            echo -e "# $title"
            if [ "$description" != "null" ]; then
                echo -e "\n$description"
            fi
        else
            echo "Error: Failed to fetch issue details for issue ID: $issueId"
            echo "Please check the following:"
            echo "1. The issue ID is correct"
            echo "2. You have the necessary permissions to access this issue"
            echo "3. Your LINEAR_API_KEY is valid and has the required scope"
            echo ""
            echo "Response body for debugging:"
            echo "$response" | jq '.'
            exit 1
        fi
    else
        echo "The current branch does not contain a valid linear issue id."
        exit 1
    fi
}

CMD=${1:-""}
case $CMD in
    i | issue)
        issue
        ;;
    id)
        id
        ;;
    t | team)
        team
        ;;
    tid | team-id)
        team_id
        ;;
    it | issue-title)
        issue_title
        ;;
    ip | issue-print)
        issue_print
        ;;
    r | reactions)
        reactions "${2:-}"
        ;;
    *)
        usage
        ;;
esac
