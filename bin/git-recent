#!/bin/bash

# Get current git user's name
current_user=$(git config user.name)
if [ -z "$current_user" ]; then
  echo "Error: Git user name not configured." >&2
  echo "Please set it using 'git config --global user.name \"Your Name\"'" >&2
  exit 1
fi

# Define the main logic as a function so its output can be piped
main() {
  # Variable to keep track of the current date header being processed
  local current_date_header=""
  # Get today's date as seconds since epoch for comparison
  local today_ts=$(date +%s)

  # Process git log output line by line
# Use Tab (%x09) as a separator for reliable parsing with `read`
# Format: CombinedDateInfo<TAB>CommitTimestamp<TAB>Subject
# CombinedDateInfo: YYYY-MM-DD Day#HH#AM/PM (e.g., 2025-04-03 Mon#11#AM)
# CommitTimestamp: Unix timestamp (seconds since epoch)
# Subject: First line of commit message
# Use process substitution <(...) instead of pipe | to run loop in current shell
while IFS=$'\t' read -r date_info commit_ts subject; do
  # Parse the combined date_info string
  date_header=$(echo "$date_info" | cut -d'#' -f1)
  hour=$(echo "$date_info" | cut -d'#' -f2)
  ampm=$(echo "$date_info" | cut -d'#' -f3)

  # Check if the date header has changed since the last commit processed
  if [ "$date_header" != "$current_date_header" ]; then
    # Print a newline before the new date header for separation,
    # but not before the very first header.
    if [ -n "$current_date_header" ]; then
      echo
    fi
    # Calculate difference in days between commit date and today
    local diff_seconds=$((today_ts - commit_ts))
    # Integer division for days (86400 seconds in a day)
    local diff_days=$((diff_seconds / 86400))

    # Construct relative date string
    local relative_date_str=""
    if [ "$diff_days" -eq 0 ]; then
      relative_date_str="(today)"
    elif [ "$diff_days" -eq 1 ]; then
      relative_date_str="(1 day ago)"
    else
      relative_date_str="($diff_days days ago)"
    fi

    # Print the new date header with the relative string, prefixed with '## '
    echo "## $date_header $relative_date_str"
    # Update the current date header
    current_date_header="$date_header"
  fi

  # Print the formatted commit line, indented with two spaces
  # Format: HH[am|pm] Subject (e.g., 08am, 11am)
  # Keep the leading zero for the hour (%I format from git log)
  # Convert AM/PM to lowercase using tr for portability
  ampm_lower=$(echo "$ampm" | tr '[:upper:]' '[:lower:]')
  # Print the formatted commit line, prefixed with '- ' using echo for portability
  echo "- ${hour}${ampm_lower} ${subject}"

done < <(git log --author="$current_user" --since="2 weeks ago" --date=local --pretty=format:'%ad%x09%at%x09%s' --date=format:'%Y-%m-%d %a#%I#%p')

# Check if any commits were processed (now works because loop is not in subshell)
if [ -z "$current_date_header" ]; then
    echo "No commits found for user: $current_user" >&2
  fi
}

# Determine the pager command
# Use PAGER environment variable if set, otherwise default to less
# -R: Raw control chars (for color, though we don't add color here yet)
# -F: Exit if output fits on one screen
# -X: Don't clear screen on exit
pager_cmd="${PAGER:-less -RFX}"

# Call the main function and pipe its output to the pager
main | $pager_cmd
